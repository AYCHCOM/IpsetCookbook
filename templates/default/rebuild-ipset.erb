#!<%= @hashbang %> -w
#
# rebuild-ipset.rb -- Construct an ipset restore file from fragments.
#
# Copyright (C) 2015 Brad Ison
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SETS_D = "/etc/ipset/sets.d/"
OUTPUT = "/etc/ipset/ipset-generated"


def write_ipset(file, data)
  File.open("#{file}.new", "w") { |f| f.write(data) }
  File.rename("#{file}.new", file)
end


def load_ipset(data)
  dir = File.dirname(OUTPUT)
  Dir.mkdir(dir) unless File.directory?(dir)

  write_ipset(OUTPUT, data)

  system("/sbin/ipset restore -file #{OUTPUT}")
end


def generate_ipset
  data = <<-EOS.gsub(/^\s+/, "")
    ###########################################################
    #                                                         #
    # Generated by rebuild-ipset at #{Time.now} #
    #                                                         #
    ###########################################################
  EOS

  data << "\n"
  data << "destroy"
  data << "\n\n"

  Dir.foreach(SETS_D) do |e|
    set_file = File.join(SETS_D, e)
    next unless File.file?(set_file)

    data << File.read(set_file)

    set_dir = set_file + ".d"

    if File.directory?(set_dir)
      Dir.foreach(set_dir) do |entry|
        entry_file = File.join(set_dir, entry)
        next unless File.file?(entry_file)

        data << File.read(entry_file)
      end
    end

    data << "\n\n"
  end

  data
end


load_ipset(generate_ipset)
exit $?.exitstatus
